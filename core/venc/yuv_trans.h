#ifndef YUV_TRANS_H_
#define YUV_TRANS_H_
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int yuv_trans(unsigned char *src_y,unsigned char *src_c,unsigned char *dst,unsigned int w,unsigned int h)
{
	int w_align,h_align,w_mbs,h_mbs;
	int flag,i,j,m;
	unsigned char *ybuf,*cbuf,*yuvbuf;
	unsigned char *ubuf,*vbuf;
	ybuf   = src_y;
	cbuf   = src_c;
	yuvbuf = dst;

	unsigned int base[256] = {
		0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
		2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,
		4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5,
		6,6,6,6,6,6,6,6, 7,7,7,7,7,7,7,7,
		0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
		2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,
		4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5,
		6,6,6,6,6,6,6,6, 7,7,7,7,7,7,7,7,

		8,8,8,8,8,8,8,8, 9,9,9,9,9,9,9,9,
		10,10,10,10,10,10,10,10, 11,11,11,11,11,11,11,11,
		12,12,12,12,12,12,12,12, 13,13,13,13,13,13,13,13,
		14,14,14,14,14,14,14,14, 15,15,15,15,15,15,15,15,
		8,8,8,8,8,8,8,8, 9,9,9,9,9,9,9,9,
		10,10,10,10,10,10,10,10, 11,11,11,11,11,11,11,11,
		12,12,12,12,12,12,12,12, 13,13,13,13,13,13,13,13,
		14,14,14,14,14,14,14,14, 15,15,15,15,15,15,15,15,
	};
	unsigned int offset[256] = {
		0,1,2,3,4,5,6,7, 0,1,2,3,4,5,6,7,
		0,1,2,3,4,5,6,7, 0,1,2,3,4,5,6,7,
		0,1,2,3,4,5,6,7, 0,1,2,3,4,5,6,7,
		0,1,2,3,4,5,6,7, 0,1,2,3,4,5,6,7,

		8,9,10,11,12,13,14,15, 8,9,10,11,12,13,14,15,
		8,9,10,11,12,13,14,15, 8,9,10,11,12,13,14,15,
		8,9,10,11,12,13,14,15, 8,9,10,11,12,13,14,15,
		8,9,10,11,12,13,14,15, 8,9,10,11,12,13,14,15,

		0,1,2,3,4,5,6,7, 0,1,2,3,4,5,6,7,
		0,1,2,3,4,5,6,7, 0,1,2,3,4,5,6,7,
		0,1,2,3,4,5,6,7, 0,1,2,3,4,5,6,7,
		0,1,2,3,4,5,6,7, 0,1,2,3,4,5,6,7,

		8,9,10,11,12,13,14,15, 8,9,10,11,12,13,14,15,
		8,9,10,11,12,13,14,15, 8,9,10,11,12,13,14,15,
		8,9,10,11,12,13,14,15, 8,9,10,11,12,13,14,15,
		8,9,10,11,12,13,14,15, 8,9,10,11,12,13,14,15,
	};
	unsigned int pos[256];

	unsigned int cbase[64] = {
		0,0,0,0,0,0,0,0,
		1,1,1,1,1,1,1,1,
		2,2,2,2,2,2,2,2,
		3,3,3,3,3,3,3,3,
		4,4,4,4,4,4,4,4,
		5,5,5,5,5,5,5,5,
		6,6,6,6,6,6,6,6,
		7,7,7,7,7,7,7,7,
	};
	unsigned int coffset[64] = {
		0,1,2,3,4,5,6,7,
		0,1,2,3,4,5,6,7,
		0,1,2,3,4,5,6,7,
		0,1,2,3,4,5,6,7,
		0,1,2,3,4,5,6,7,
		0,1,2,3,4,5,6,7,
		0,1,2,3,4,5,6,7,
		0,1,2,3,4,5,6,7,
	};
	unsigned int cpos[64];

	w_align = (w + 15)&(~15);
	h_align = (h + 15)&(~15);
	w_mbs = w_align / 16;
	h_mbs = h_align / 16;

	for (i = 0 ; i < 256;i ++)
	{
		pos[i] = base[i] * w_align + offset[i];
	}
	for (i = 0 ; i < 64;i ++)
	{
		cpos[i] = cbase[i] * w_align / 2 + coffset[i];
	}

	memset(yuvbuf,0,w_align * h_align *3 /2);
	unsigned char *data;
	unsigned int offset_num;

	// Y
	for (i = 0;i < h_mbs ;i ++)
	{
		data = ybuf + i * w_mbs * 256;
		offset_num = i * w_mbs * 256;
		for (j = 0;j < w_mbs;j ++)
		{
			for (m = 0; m <256;m++)
			{
				*(yuvbuf + offset_num + pos[m]) = *(data + m);
			}
			data += 256;
			offset_num += 16;
		}
	}

	// UV
	ubuf = yuvbuf + w_align*h_align;
	vbuf = yuvbuf + w_align*h_align + w_align*h_align/4;
	for (i = 0;i < h_mbs ;i ++)
	{
		data = cbuf + i * w_mbs * 128;
		offset_num = i * w_mbs * 64;
		for (j = 0;j < w_mbs;j ++)
		{
			for (m = 0; m < 64;m++)
			{
				*(ubuf + offset_num + cpos[m]) = *(data + m);
				*(vbuf + offset_num + cpos[m]) = *(data + 64 + m);
			}
			data += 128;
			offset_num += 8;
		}
	}
	return 0;
}

#endif
